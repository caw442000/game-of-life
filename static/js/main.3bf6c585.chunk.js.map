{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["neighborLocations","App","useState","rowLength","setRowLength","columnLength","setColumnLength","emptyBoard","console","log","rows","i","push","Array","from","board","setBoard","buffer","bufferTwo","currentBoard","running","setRunning","generations","changesMade","speed","setSpeed","runningRef","useRef","generationsRef","changesMadeRef","speedRef","current","rowLengthRef","columnLengthRef","runGame","useCallback","currentStatus","nextStatus","next","produce","newBufferTwo","j","neighbors","forEach","x","y","iCheck","jCheck","setTimeout","className","onClick","Math","random","randomBoard","style","display","gridTemplateColumns","map","col","key","newBoard","boardCopy","handleClick","width","height","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3bf6c585.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport produce from \"immer\";\nimport \"./App.css\";\n\nconst neighborLocations = [\n  [0, 1],\n  [0, -1],\n  [1, 0],\n  [-1, 0],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n];\n\nfunction App() {\n  const [rowLength, setRowLength] = useState(30);\n  const [columnLength, setColumnLength] = useState(30);\n\n  const randomBoard = () => {\n    const rows = [];\n    for (let i = 0; i < rowLength; i++) {\n      rows.push(\n        Array.from(Array(columnLength), () => (Math.random() > 0.5 ? 1 : 0))\n      );\n    }\n    return rows;\n  };\n\n  const emptyBoard = (rowLength = 30, columnLength = 30) => {\n    setRowLength(rowLength);\n    setColumnLength(columnLength);\n    console.log(\"row\", rowLength);\n    console.log(\"column\", columnLength);\n    const rows = [];\n    for (let i = 0; i < rowLength; i++) {\n      rows.push(Array.from(Array(columnLength), () => 0));\n    }\n    return rows;\n  };\n  const [board, setBoard] = useState(emptyBoard);\n  const [buffer, setBuffer] = useState(emptyBoard);\n  const [bufferTwo, setBufferTwo] = useState(emptyBoard);\n  const [currentBoard, setCurrentBoard] = useState(emptyBoard);\n  const [running, setRunning] = useState(false);\n  const [generations, setGenerations] = useState(0);\n  const [changesMade, setChangesMade] = useState(false);\n  const [speed, setSpeed] = useState(1000);\n\n  const handleClick = (i, j) => {\n    const newBoard = produce(board, (boardCopy) => {\n      boardCopy[i][j] = board[i][j] ? 0 : 1;\n    });\n    setBoard(newBoard);\n\n    // const newBoard = Array.from(board);\n\n    // newBoard[i][j] = board[i][j] ? 0 : 1;\n    // setBoard(newBoard);\n  };\n  const runningRef = useRef(running);\n  const generationsRef = useRef(generations);\n  const changesMadeRef = useRef(changesMade);\n  const bufferRef = useRef(buffer);\n  const bufferTwoRef = useRef(bufferTwo);\n  const currentBoardRef = useRef(currentBoard);\n  const speedRef = useRef(speed);\n  runningRef.current = running;\n  changesMadeRef.current = true;\n  const rowLengthRef = useRef(rowLength);\n  const columnLengthRef = useRef(columnLength);\n\n  rowLengthRef.current = rowLength;\n  columnLengthRef.current = columnLength;\n\n  // const updateBoard = (row, col) => {\n  //   rowLength = row\n  //   columnLength = col\n  //   emptyBoard(rowLength, columnLength)\n  //   console.log(\"row\", rowLength)\n\n  // }\n\n  const runGame = useCallback((currentStatus, nextStatus) => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    changesMadeRef.current = false;\n\n    let current = currentStatus;\n    let next = nextStatus;\n\n    let buffer = (current) => {\n      return produce(current, (newBoard) => {\n        for (let i = 0; i < rowLengthRef.current; i++) {\n          for (let j = 0; j < columnLengthRef.current; j++) {\n            let neighbors = 0;\n            // if(newBoard[i][j + 1] === 1){\n            //   neighbors += 1\n            // }\n            neighborLocations.forEach(([x, y]) => {\n              const iCheck = i + x;\n              const jCheck = j + y;\n              if (\n                iCheck >= 0 &&\n                iCheck < rowLengthRef.current &&\n                jCheck >= 0 &&\n                jCheck < columnLengthRef.current\n              ) {\n                neighbors += current[iCheck][jCheck];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              newBoard[i][j] = 0;\n            } else if (board[i][j] === 0 && neighbors === 3) {\n              newBoard[i][j] = 1;\n              changesMadeRef.current = true;\n            }\n          }\n        }\n        if (changesMadeRef.current === false) {\n          runningRef.current = !running;\n          return;\n        }\n      });\n    };\n\n    let bufferTwo = (next) => {\n      return produce(next, (newBufferTwo) => {\n        for (let i = 0; i < rowLengthRef.current; i++) {\n          for (let j = 0; j < columnLengthRef.current; j++) {\n            let neighbors = 0;\n            // if(newBoard[i][j + 1] === 1){\n            //   neighbors += 1\n            // }\n            neighborLocations.forEach(([x, y]) => {\n              const iCheck = i + x;\n              const jCheck = j + y;\n              if (\n                iCheck >= 0 &&\n                iCheck < rowLengthRef.current &&\n                jCheck >= 0 &&\n                jCheck < columnLengthRef.current\n              ) {\n                neighbors += next[iCheck][jCheck];\n              }\n            });\n            if (neighbors < 2 || neighbors > 3) {\n              newBufferTwo[i][j] = 0;\n            } else if (next[i][j] === 0 && neighbors === 3) {\n              newBufferTwo[i][j] = 1;\n              changesMadeRef.current = true;\n            }\n          }\n        }\n        if (changesMadeRef.current === false) {\n          runningRef.current = !running;\n          return;\n        }\n      });\n    };\n\n    next = bufferTwo;\n\n    // display = bufferRef.current\n\n    generationsRef.current += 1;\n    console.log(\"generation\", generationsRef.current);\n\n    setBoard(current);\n\n    // when board is set make next grid current and pass next grid down\n\n    // const temp =\n\n    // bufferRef.current = bufferTwoRef.current\n\n    let temp = current;\n    current = next;\n    next = current;\n\n    console.log(\"speed\", speedRef.current);\n\n    setTimeout(runGame, speedRef.current, current);\n  }, []);\n\n  // console.log(\"total\", board.reduce((a,b) => a+ b,0));\n  return (\n    <div className=\"App\">\n      <h1 className=\"Title\">Game of Life</h1>\n      <div className=\"Buttons\">\n        <button\n          onClick={() => {\n            setRunning(!running);\n            if (!running) {\n              runningRef.current = true;\n              // generationsRef.current += 1;\n              runGame(board);\n            }\n          }}\n        >\n          {!running ? \"start\" : \"stop\"}\n        </button>\n        <button\n          onClick={() => {\n            setBoard(emptyBoard(rowLength, columnLength));\n            if (running) {\n              setRunning(!running);\n            }\n\n            generationsRef.current = 0;\n          }}\n        >\n          clear\n        </button>\n        <button\n          onClick={() => {\n            setBoard(randomBoard(rowLength, columnLength));\n            generationsRef.current = 0;\n          }}\n        >\n          random\n        </button>\n        <button\n          onClick={() => {\n            speedRef.current *= 2;\n            setSpeed(speedRef.current);\n          }}\n        >\n          slower\n        </button>\n        <button\n          onClick={() => {\n            if (speedRef.current >= 50) {\n              speedRef.current /= 2;\n              setSpeed(speedRef.current);\n            }\n          }}\n        >\n          fast\n        </button>\n        <button\n          onClick={() => {\n            setBoard(emptyBoard(25, 25));\n            if (running) {\n              setRunning(!running);\n            }\n\n            generationsRef.current = 0;\n          }}\n        >\n          small\n        </button>\n        <button\n          onClick={() => {\n            setBoard(emptyBoard(40, 40));\n            if (running) {\n              setRunning(!running);\n            }\n\n            generationsRef.current = 0;\n          }}\n        >\n          medium\n        </button>\n        <button\n          onClick={() => {\n            setBoard(emptyBoard(50, 50));\n            if (running) {\n              setRunning(!running);\n            }\n\n            generationsRef.current = 0;\n          }}\n        >\n          large\n        </button>\n      </div>\n      <div className=\"InfoBar\">\n        <h1> Generations: {generationsRef.current} </h1>\n        <h1> Speed: {speed / 1000} sec </h1>\n      </div>\n\n      <h2 className=\"RulesTitle\">RULES </h2>\n      <p className=\"RulesText\">\n        1: If the cell is alive and has 2 or 3 neighbors, then it remains alive.\n        Else it dies.\n      </p>\n      <p className=\"RulesText\">\n        2: If the cell is dead and has exactly 3 neighbors, then it comes to life.\n        Else if remains dead\n      </p>\n      <p className=\"RulesText\">\n        3: All edge cells are permanently dead\n      </p>\n\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${columnLength}, 20px)`,\n        }}\n      >\n        {board.map((rows, i) =>\n          rows.map((col, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => {\n                if (!running) {\n                  handleClick(i, j);\n                }\n              }}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: board[i][j] ? \"black\" : \"red\",\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}